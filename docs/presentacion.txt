propuesta 1: http://piratepad.net/xLxPa13K4m
Introducción a CKAN - Sacándole el jugo a los portales de datos

propuesta 2: http://piratepad.net/C1svtgOXa5
Desarrollo de mapas interactivos con herramientas libres

slides: http://piratepad.net/bGIhPhqLAz

app corriendo: http://opensas.github.io/geo-demo/

repo de github: https://github.com/opensas/geo-demo

Aprendé el idioma de tu developer, el único lenguaje de programación que vas a necesitar

Ideas para las slides:

slide: Agenda:
Le preguntamos a un developer....
¿Qué vamos a ver en este taller?

Muy fácil:

Vamos a tomar un dataset de ckan, procesaremos el csv con OpenRefine, luego lo georreferenciaremos consumiendo el web service de google maps y de OpenStreetMap para subirlo a cartoDB y publicar nuestra propia API.
Nuestra API será un web service REST que aceptará consultas SQL y retornará un JSON que procesaremos desde una aplicación hecha con JavaScript usando las librerías Leaflet y underscore.
Publicaremos nuestro repo en en github, y utilizaremos git como control de código fuente.
Cuando la aplicación esté lista usaremos Github pages como hosting.

--
dataset
ckan
csv
OpenRefine
georreferenciaremos
web service
google maps
OpenStreetMap
cartoDB
API
SQL
API
REST
JSON
JavaScript
Leaflet
underscore
git
repo
github

... ¿¿¿QUE???
vamos por partes:

1. obtener y masajear nuestro dataset
tools: ckan, OpenRefine
conceptos: dataset, csv
 
2. Agregar información geográfica a nuestros conjuntos de datos
tools: OpenRefine, Google Maps API, OpenStreetMap API, Firefox, JsonViewer Plugin
conceptos: geocode - web service - API - REST - JSON

3. Crear nuestro propio web service usando CartoDB y SQL
tools: CartoDB, PosgreSQL, PostGIS
conceptos: web service - API - JSON - REST - SQL

4. Publicar y compartir nuestro proyecto en Github
tools: github
conceptos: git, github

5. Desarrollar una aplicación interactiva con Javascript y Leaflet
tools: Jquery, Leaflet, underscore, JavaScript
conceptos: código cliente, código servidor

6. Publicar nuestra aplicación con Github Pages

7. PhoneGap
¡Manos a la obra!


slide: CKAN
***********

- herramienta libre para la gestión de portales de datos

- desarrollada por la Open Knowledge Foundation (http://okfn.org/)

- publicado bajo licencia GNU Affero General Public License (AGPL) v3.0, el código está disponible en Github (https://github.com/okfn/ckan)

- es una de las plataformas más populares del mundo, utilizada por el Gobierno del Reino Unido (http://data.gov.uk/), Brasil (http://dados.gov.br/) y Chile (http://datos.gob.cl/).

- en argentina es utilizada por el Portal Nacional de Datos (http://datospublicos.gob.ar/), la ciudad de Buenos Aires (http://data.buenosaires.gob.ar/) y la provincia de Misiones (http://www.datos.misiones.gov.ar/).

slide: Dataset o conjunto de datos
**********************************

Los portales de datos publican datasets, o conjuntos de datos que están compuestos por múltiples recursos con información relacionada.

Los recursos recursos que contienen información tabular, por lo común usan el formato CSV

CSV: comma separated value (valores separados por comas)

(encodings: http://www.joelonsoftware.com/articles/Unicode.html)

(mostrar en un editor de texto)
(tener local un editor con un CSV)

hands-on
mostrar CKAN del dataset de cultura

http://datospublicos.gob.ar/data/dataset/mapa-del-sistema-de-informacion-cultural

# TODO!!! que ande el preview
http://datospublicos.gob.ar/data/dataset/mapa-del-sistema-de-informacion-cultural/resource/5f24b04b-65ea-4f52-84e8-f12f196a29b2


slide: Data cleanse o masajeo de datos
**************************************

- consiste en descubrir, corregir o eliminar datos erróneos de un conjunto de datos.

- permite identificar datos incompletos, incorrectos, inexactos, no pertinentes, etc. y luego substituir, modificar o eliminar estos datos sucios ("data duty"). 

- OpenRefine (http://openrefine.org/) es una herramienta libre para trabajar con "datos sucios", masajearlos, convertirlos de un formato a otro, enriquecerlos con web services, y vincularlos con bases como Freebase.

---
hands-on: cleanse

mapa_cultura-step_0 (cleanse).csv

arreglar el dataset para

1. Facet por tipo - mostrar faceta

2. provincia:

facetar por provincia

trim - remove two whitespaces

cluster

3. eliminar puntos sin direcciones
facet by blank - remove matching

4. eliminar columnas que no queremos - mostrar historial

-----

slide: algunos términos más

Ahora, vamos a consumir un web service REST que nos retornará un json para geocodificar nuestras direcciones.

WAT????

Explicamos algunos términos:

web service: #TODO

REST: #TODO

JSON: #TODO

--

slide: geocode
**************

geocode: Es el proceso por el cual a partir de una información geográfica, como puede ser una dirección o un código postal, se obtiene las coordenadas geográficas, comúnmente en la forma de latitud y longitud.

dirección -> latitud, longitud


Ejemplos: nominatim

- Software libre
- colaborativo - wiki de maps
- sin limites
- respeta tu privacidad
- no tan preciso (pero podés ayudar a mejorarlo)

ejemplo: http://open.mapquestapi.com/nominatim/v1/search.php?format=json&q=rivadavia 1234, ciudad de buenos aires, argentina

Google maps API

- Software privativo
- no podés colaborar
- límites en el uso de la API
- respeta los intereses de la NSA
- suele brindar mejores resultados (por ahora)

ejemplo: http://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=rivadavia 1234, ciudad de buenos aires, argentina

--

slide: UI versus API

¿Cuál es la diferencia entre una aplicación y un servicio web?

(hacer un cuadrito con las opciones enfrentadas)


Aplicación Web                        #              Servicio web

Para ser usada por seres humanos      #              Para ser usado por programas

UI - Interfaz de Usuario              #              API - Interfaz de programación


slide: UI versus API - un ejemplo:

OpenStreetMap      #     Nominatim (el web service usado por OpenStreetMap)

Aplicación Web                        #              Servicio web


http://www.openstreetmap.org                         http://open.mapquestapi.com/nominatim/v1/search.php


UI - entrada: caja de texto           # API - entrada: url (REST)

link: http://www.openstreetmap.org    # link: http://open.mapquestapi.com/nominatim/v1/search.php?format=json&q=
                                        Av. Corrientes 456, Ciudad Autónoma de Buenos Aires, 
                                        Ciudad Autónoma de Buenos Aires, Argentina

UI - salida: el mapa en pantalla      # API - salida: JSON

(imagen mapa)                         # json


hands on: ejemplo usando openstreetmap y nominatin
--------------------------------------------------

Servicio: brinda información geográfica sobre una dirección

buscamos una dirección: rivadavia 1234, ciudad de buenos aires, argentina

usando openstreetmap y usando el web service

link: http://open.mapquestapi.com/nominatim/v1/search.php?format=json&q=rivadavia 1234, ciudad de buenos aires, argentina

--


hands on: geocode
-----------------

mapa_cultura-step_1 (geocode).csv

1. filtrar los primeros 10 items - marcar manualmente
facet by star

2. crear columna direccion_geo

value + ', ' + 
cells.provincia.value + ', Argentina'

3. crear columna osm_geo

'http://open.mapquestapi.com/nominatim/v1/search.php?format=json&q=' +
value.escape('url')

4. eliminamos las que no trajeron resultado - columna status

value.parseJson().lenght()

filter

remove rows

remove column status

5. add lat, lon column

value.parseJson()[0].lon.toNumber()
value.parseJson()[0].lat.toNumber()

remove column direccion_geo, osm_geo

exportar como mapa_cultura-tmp



#TODO#####


--

slide: cartodb

- intro cartodb

- sql, postgresql, postgis


hands on: 

1. importar cultura_test.csv

mostrarlo en pantall

2. mostrar cultura (el posta)

hacer una consulta


SELECT * FROM cultura
where subtipo like '%teatr%'


SELECT * FROM cultura
where nombre like '%Konex%'

wizard - subtipo


share map: http://cdb.io/17bUG2j


API

http://devel.cartodb.com/api/v2/sql?q=select * from cultura limit 10

http://devel.cartodb.com/api/v2/sql?q=select * from cultura where nombre = 'Ciudad Cultural Konex'


- importar dataset csv

- verlo en cartodb

- query en sql y una query espacial

- mostrar el web service, con la misma query

--

github

- intro git y github (concepto: SCM)


hands on: github

https://github.com/new


https://github.com/opensas/mapa-cultura

local: 

git init

git remote add origin git@github.com:opensas/mapa-cultura.git



---



TAREAS:
mati: 
meter la app en phonegap
agregar este widget: http://leafletjs.com/examples/layers-control.html

sas:
analizar el dataset de cultura
adaptar la app al dataset de cultura
agregarle la consulta por los puntos cercanos a mi posicion actual
filtrar por tipo 

dms:
Presentacion Sozi